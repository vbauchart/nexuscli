# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.7.0-04
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SearchApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def search(self, **kwargs):
        """
        Search components
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str continuation_token: A token returned by a prior request. If present, the next page of results are returned
        :param str q: Query by keyword
        :param str repository: Repository name
        :param str format: Query by format
        :param str group: Component group
        :param str name: Component name
        :param str version: Component version
        :param str md5: Specific MD5 hash of component's asset
        :param str sha1: Specific SHA-1 hash of component's asset
        :param str sha256: Specific SHA-256 hash of component's asset
        :param str sha512: Specific SHA-512 hash of component's asset
        :param str docker_image_name: Docker image name
        :param str docker_image_tag: Docker image tag
        :param str docker_layer_id: Docker layer ID
        :param str docker_content_digest: Docker content digest
        :param str maven_group_id: Maven groupId
        :param str maven_artifact_id: Maven artifactId
        :param str maven_base_version: Maven base version
        :param str maven_extension: Maven extension of component's asset
        :param str maven_classifier: Maven classifier of component's asset
        :param str npm_scope: NPM scope
        :param str nuget_id: Nuget id
        :param str nuget_tags: Nuget tags
        :param str pypi_classifiers: PyPi classifiers
        :param str pypi_description: PyPi description
        :param str pypi_keywords: PyPi keywords
        :param str pypi_summary: PyPi summary
        :param str rubygems_description: RubyGems description
        :param str rubygems_platform: RubyGems platform
        :param str rubygems_summary: RubyGems summary
        :return: PageComponentXO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_with_http_info(**kwargs)
        else:
            (data) = self.search_with_http_info(**kwargs)
            return data

    def search_with_http_info(self, **kwargs):
        """
        Search components
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str continuation_token: A token returned by a prior request. If present, the next page of results are returned
        :param str q: Query by keyword
        :param str repository: Repository name
        :param str format: Query by format
        :param str group: Component group
        :param str name: Component name
        :param str version: Component version
        :param str md5: Specific MD5 hash of component's asset
        :param str sha1: Specific SHA-1 hash of component's asset
        :param str sha256: Specific SHA-256 hash of component's asset
        :param str sha512: Specific SHA-512 hash of component's asset
        :param str docker_image_name: Docker image name
        :param str docker_image_tag: Docker image tag
        :param str docker_layer_id: Docker layer ID
        :param str docker_content_digest: Docker content digest
        :param str maven_group_id: Maven groupId
        :param str maven_artifact_id: Maven artifactId
        :param str maven_base_version: Maven base version
        :param str maven_extension: Maven extension of component's asset
        :param str maven_classifier: Maven classifier of component's asset
        :param str npm_scope: NPM scope
        :param str nuget_id: Nuget id
        :param str nuget_tags: Nuget tags
        :param str pypi_classifiers: PyPi classifiers
        :param str pypi_description: PyPi description
        :param str pypi_keywords: PyPi keywords
        :param str pypi_summary: PyPi summary
        :param str rubygems_description: RubyGems description
        :param str rubygems_platform: RubyGems platform
        :param str rubygems_summary: RubyGems summary
        :return: PageComponentXO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['continuation_token', 'q', 'repository', 'format', 'group', 'name', 'version', 'md5', 'sha1', 'sha256', 'sha512', 'docker_image_name', 'docker_image_tag', 'docker_layer_id', 'docker_content_digest', 'maven_group_id', 'maven_artifact_id', 'maven_base_version', 'maven_extension', 'maven_classifier', 'npm_scope', 'nuget_id', 'nuget_tags', 'pypi_classifiers', 'pypi_description', 'pypi_keywords', 'pypi_summary', 'rubygems_description', 'rubygems_platform', 'rubygems_summary']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'continuation_token' in params:
            query_params.append(('continuationToken', params['continuation_token']))
        if 'q' in params:
            query_params.append(('q', params['q']))
        if 'repository' in params:
            query_params.append(('repository', params['repository']))
        if 'format' in params:
            query_params.append(('format', params['format']))
        if 'group' in params:
            query_params.append(('group', params['group']))
        if 'name' in params:
            query_params.append(('name', params['name']))
        if 'version' in params:
            query_params.append(('version', params['version']))
        if 'md5' in params:
            query_params.append(('md5', params['md5']))
        if 'sha1' in params:
            query_params.append(('sha1', params['sha1']))
        if 'sha256' in params:
            query_params.append(('sha256', params['sha256']))
        if 'sha512' in params:
            query_params.append(('sha512', params['sha512']))
        if 'docker_image_name' in params:
            query_params.append(('docker.imageName', params['docker_image_name']))
        if 'docker_image_tag' in params:
            query_params.append(('docker.imageTag', params['docker_image_tag']))
        if 'docker_layer_id' in params:
            query_params.append(('docker.layerId', params['docker_layer_id']))
        if 'docker_content_digest' in params:
            query_params.append(('docker.contentDigest', params['docker_content_digest']))
        if 'maven_group_id' in params:
            query_params.append(('maven.groupId', params['maven_group_id']))
        if 'maven_artifact_id' in params:
            query_params.append(('maven.artifactId', params['maven_artifact_id']))
        if 'maven_base_version' in params:
            query_params.append(('maven.baseVersion', params['maven_base_version']))
        if 'maven_extension' in params:
            query_params.append(('maven.extension', params['maven_extension']))
        if 'maven_classifier' in params:
            query_params.append(('maven.classifier', params['maven_classifier']))
        if 'npm_scope' in params:
            query_params.append(('npm.scope', params['npm_scope']))
        if 'nuget_id' in params:
            query_params.append(('nuget.id', params['nuget_id']))
        if 'nuget_tags' in params:
            query_params.append(('nuget.tags', params['nuget_tags']))
        if 'pypi_classifiers' in params:
            query_params.append(('pypi.classifiers', params['pypi_classifiers']))
        if 'pypi_description' in params:
            query_params.append(('pypi.description', params['pypi_description']))
        if 'pypi_keywords' in params:
            query_params.append(('pypi.keywords', params['pypi_keywords']))
        if 'pypi_summary' in params:
            query_params.append(('pypi.summary', params['pypi_summary']))
        if 'rubygems_description' in params:
            query_params.append(('rubygems.description', params['rubygems_description']))
        if 'rubygems_platform' in params:
            query_params.append(('rubygems.platform', params['rubygems_platform']))
        if 'rubygems_summary' in params:
            query_params.append(('rubygems.summary', params['rubygems_summary']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/rest/beta/search', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PageComponentXO',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def search_and_download_assets(self, **kwargs):
        """
        Search and download asset
        Returns a 302 Found with location header field set to download URL. Search must return a single asset to receive download URL.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_and_download_assets(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q: Query by keyword
        :param str repository: Repository name
        :param str format: Query by format
        :param str group: Component group
        :param str name: Component name
        :param str version: Component version
        :param str md5: Specific MD5 hash of component's asset
        :param str sha1: Specific SHA-1 hash of component's asset
        :param str sha256: Specific SHA-256 hash of component's asset
        :param str sha512: Specific SHA-512 hash of component's asset
        :param str docker_image_name: Docker image name
        :param str docker_image_tag: Docker image tag
        :param str docker_layer_id: Docker layer ID
        :param str docker_content_digest: Docker content digest
        :param str maven_group_id: Maven groupId
        :param str maven_artifact_id: Maven artifactId
        :param str maven_base_version: Maven base version
        :param str maven_extension: Maven extension of component's asset
        :param str maven_classifier: Maven classifier of component's asset
        :param str npm_scope: NPM scope
        :param str nuget_id: Nuget id
        :param str nuget_tags: Nuget tags
        :param str pypi_classifiers: PyPi classifiers
        :param str pypi_description: PyPi description
        :param str pypi_keywords: PyPi keywords
        :param str pypi_summary: PyPi summary
        :param str rubygems_description: RubyGems description
        :param str rubygems_platform: RubyGems platform
        :param str rubygems_summary: RubyGems summary
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_and_download_assets_with_http_info(**kwargs)
        else:
            (data) = self.search_and_download_assets_with_http_info(**kwargs)
            return data

    def search_and_download_assets_with_http_info(self, **kwargs):
        """
        Search and download asset
        Returns a 302 Found with location header field set to download URL. Search must return a single asset to receive download URL.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_and_download_assets_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q: Query by keyword
        :param str repository: Repository name
        :param str format: Query by format
        :param str group: Component group
        :param str name: Component name
        :param str version: Component version
        :param str md5: Specific MD5 hash of component's asset
        :param str sha1: Specific SHA-1 hash of component's asset
        :param str sha256: Specific SHA-256 hash of component's asset
        :param str sha512: Specific SHA-512 hash of component's asset
        :param str docker_image_name: Docker image name
        :param str docker_image_tag: Docker image tag
        :param str docker_layer_id: Docker layer ID
        :param str docker_content_digest: Docker content digest
        :param str maven_group_id: Maven groupId
        :param str maven_artifact_id: Maven artifactId
        :param str maven_base_version: Maven base version
        :param str maven_extension: Maven extension of component's asset
        :param str maven_classifier: Maven classifier of component's asset
        :param str npm_scope: NPM scope
        :param str nuget_id: Nuget id
        :param str nuget_tags: Nuget tags
        :param str pypi_classifiers: PyPi classifiers
        :param str pypi_description: PyPi description
        :param str pypi_keywords: PyPi keywords
        :param str pypi_summary: PyPi summary
        :param str rubygems_description: RubyGems description
        :param str rubygems_platform: RubyGems platform
        :param str rubygems_summary: RubyGems summary
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'repository', 'format', 'group', 'name', 'version', 'md5', 'sha1', 'sha256', 'sha512', 'docker_image_name', 'docker_image_tag', 'docker_layer_id', 'docker_content_digest', 'maven_group_id', 'maven_artifact_id', 'maven_base_version', 'maven_extension', 'maven_classifier', 'npm_scope', 'nuget_id', 'nuget_tags', 'pypi_classifiers', 'pypi_description', 'pypi_keywords', 'pypi_summary', 'rubygems_description', 'rubygems_platform', 'rubygems_summary']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_and_download_assets" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))
        if 'repository' in params:
            query_params.append(('repository', params['repository']))
        if 'format' in params:
            query_params.append(('format', params['format']))
        if 'group' in params:
            query_params.append(('group', params['group']))
        if 'name' in params:
            query_params.append(('name', params['name']))
        if 'version' in params:
            query_params.append(('version', params['version']))
        if 'md5' in params:
            query_params.append(('md5', params['md5']))
        if 'sha1' in params:
            query_params.append(('sha1', params['sha1']))
        if 'sha256' in params:
            query_params.append(('sha256', params['sha256']))
        if 'sha512' in params:
            query_params.append(('sha512', params['sha512']))
        if 'docker_image_name' in params:
            query_params.append(('docker.imageName', params['docker_image_name']))
        if 'docker_image_tag' in params:
            query_params.append(('docker.imageTag', params['docker_image_tag']))
        if 'docker_layer_id' in params:
            query_params.append(('docker.layerId', params['docker_layer_id']))
        if 'docker_content_digest' in params:
            query_params.append(('docker.contentDigest', params['docker_content_digest']))
        if 'maven_group_id' in params:
            query_params.append(('maven.groupId', params['maven_group_id']))
        if 'maven_artifact_id' in params:
            query_params.append(('maven.artifactId', params['maven_artifact_id']))
        if 'maven_base_version' in params:
            query_params.append(('maven.baseVersion', params['maven_base_version']))
        if 'maven_extension' in params:
            query_params.append(('maven.extension', params['maven_extension']))
        if 'maven_classifier' in params:
            query_params.append(('maven.classifier', params['maven_classifier']))
        if 'npm_scope' in params:
            query_params.append(('npm.scope', params['npm_scope']))
        if 'nuget_id' in params:
            query_params.append(('nuget.id', params['nuget_id']))
        if 'nuget_tags' in params:
            query_params.append(('nuget.tags', params['nuget_tags']))
        if 'pypi_classifiers' in params:
            query_params.append(('pypi.classifiers', params['pypi_classifiers']))
        if 'pypi_description' in params:
            query_params.append(('pypi.description', params['pypi_description']))
        if 'pypi_keywords' in params:
            query_params.append(('pypi.keywords', params['pypi_keywords']))
        if 'pypi_summary' in params:
            query_params.append(('pypi.summary', params['pypi_summary']))
        if 'rubygems_description' in params:
            query_params.append(('rubygems.description', params['rubygems_description']))
        if 'rubygems_platform' in params:
            query_params.append(('rubygems.platform', params['rubygems_platform']))
        if 'rubygems_summary' in params:
            query_params.append(('rubygems.summary', params['rubygems_summary']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/rest/beta/search/assets/download', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def search_assets(self, **kwargs):
        """
        Search assets
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_assets(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str continuation_token: A token returned by a prior request. If present, the next page of results are returned
        :param str q: Query by keyword
        :param str repository: Repository name
        :param str format: Query by format
        :param str group: Component group
        :param str name: Component name
        :param str version: Component version
        :param str md5: Specific MD5 hash of component's asset
        :param str sha1: Specific SHA-1 hash of component's asset
        :param str sha256: Specific SHA-256 hash of component's asset
        :param str sha512: Specific SHA-512 hash of component's asset
        :param str docker_image_name: Docker image name
        :param str docker_image_tag: Docker image tag
        :param str docker_layer_id: Docker layer ID
        :param str docker_content_digest: Docker content digest
        :param str maven_group_id: Maven groupId
        :param str maven_artifact_id: Maven artifactId
        :param str maven_base_version: Maven base version
        :param str maven_extension: Maven extension of component's asset
        :param str maven_classifier: Maven classifier of component's asset
        :param str npm_scope: NPM scope
        :param str nuget_id: Nuget id
        :param str nuget_tags: Nuget tags
        :param str pypi_classifiers: PyPi classifiers
        :param str pypi_description: PyPi description
        :param str pypi_keywords: PyPi keywords
        :param str pypi_summary: PyPi summary
        :param str rubygems_description: RubyGems description
        :param str rubygems_platform: RubyGems platform
        :param str rubygems_summary: RubyGems summary
        :return: PageAssetXO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_assets_with_http_info(**kwargs)
        else:
            (data) = self.search_assets_with_http_info(**kwargs)
            return data

    def search_assets_with_http_info(self, **kwargs):
        """
        Search assets
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_assets_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str continuation_token: A token returned by a prior request. If present, the next page of results are returned
        :param str q: Query by keyword
        :param str repository: Repository name
        :param str format: Query by format
        :param str group: Component group
        :param str name: Component name
        :param str version: Component version
        :param str md5: Specific MD5 hash of component's asset
        :param str sha1: Specific SHA-1 hash of component's asset
        :param str sha256: Specific SHA-256 hash of component's asset
        :param str sha512: Specific SHA-512 hash of component's asset
        :param str docker_image_name: Docker image name
        :param str docker_image_tag: Docker image tag
        :param str docker_layer_id: Docker layer ID
        :param str docker_content_digest: Docker content digest
        :param str maven_group_id: Maven groupId
        :param str maven_artifact_id: Maven artifactId
        :param str maven_base_version: Maven base version
        :param str maven_extension: Maven extension of component's asset
        :param str maven_classifier: Maven classifier of component's asset
        :param str npm_scope: NPM scope
        :param str nuget_id: Nuget id
        :param str nuget_tags: Nuget tags
        :param str pypi_classifiers: PyPi classifiers
        :param str pypi_description: PyPi description
        :param str pypi_keywords: PyPi keywords
        :param str pypi_summary: PyPi summary
        :param str rubygems_description: RubyGems description
        :param str rubygems_platform: RubyGems platform
        :param str rubygems_summary: RubyGems summary
        :return: PageAssetXO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['continuation_token', 'q', 'repository', 'format', 'group', 'name', 'version', 'md5', 'sha1', 'sha256', 'sha512', 'docker_image_name', 'docker_image_tag', 'docker_layer_id', 'docker_content_digest', 'maven_group_id', 'maven_artifact_id', 'maven_base_version', 'maven_extension', 'maven_classifier', 'npm_scope', 'nuget_id', 'nuget_tags', 'pypi_classifiers', 'pypi_description', 'pypi_keywords', 'pypi_summary', 'rubygems_description', 'rubygems_platform', 'rubygems_summary']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_assets" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'continuation_token' in params:
            query_params.append(('continuationToken', params['continuation_token']))
        if 'q' in params:
            query_params.append(('q', params['q']))
        if 'repository' in params:
            query_params.append(('repository', params['repository']))
        if 'format' in params:
            query_params.append(('format', params['format']))
        if 'group' in params:
            query_params.append(('group', params['group']))
        if 'name' in params:
            query_params.append(('name', params['name']))
        if 'version' in params:
            query_params.append(('version', params['version']))
        if 'md5' in params:
            query_params.append(('md5', params['md5']))
        if 'sha1' in params:
            query_params.append(('sha1', params['sha1']))
        if 'sha256' in params:
            query_params.append(('sha256', params['sha256']))
        if 'sha512' in params:
            query_params.append(('sha512', params['sha512']))
        if 'docker_image_name' in params:
            query_params.append(('docker.imageName', params['docker_image_name']))
        if 'docker_image_tag' in params:
            query_params.append(('docker.imageTag', params['docker_image_tag']))
        if 'docker_layer_id' in params:
            query_params.append(('docker.layerId', params['docker_layer_id']))
        if 'docker_content_digest' in params:
            query_params.append(('docker.contentDigest', params['docker_content_digest']))
        if 'maven_group_id' in params:
            query_params.append(('maven.groupId', params['maven_group_id']))
        if 'maven_artifact_id' in params:
            query_params.append(('maven.artifactId', params['maven_artifact_id']))
        if 'maven_base_version' in params:
            query_params.append(('maven.baseVersion', params['maven_base_version']))
        if 'maven_extension' in params:
            query_params.append(('maven.extension', params['maven_extension']))
        if 'maven_classifier' in params:
            query_params.append(('maven.classifier', params['maven_classifier']))
        if 'npm_scope' in params:
            query_params.append(('npm.scope', params['npm_scope']))
        if 'nuget_id' in params:
            query_params.append(('nuget.id', params['nuget_id']))
        if 'nuget_tags' in params:
            query_params.append(('nuget.tags', params['nuget_tags']))
        if 'pypi_classifiers' in params:
            query_params.append(('pypi.classifiers', params['pypi_classifiers']))
        if 'pypi_description' in params:
            query_params.append(('pypi.description', params['pypi_description']))
        if 'pypi_keywords' in params:
            query_params.append(('pypi.keywords', params['pypi_keywords']))
        if 'pypi_summary' in params:
            query_params.append(('pypi.summary', params['pypi_summary']))
        if 'rubygems_description' in params:
            query_params.append(('rubygems.description', params['rubygems_description']))
        if 'rubygems_platform' in params:
            query_params.append(('rubygems.platform', params['rubygems_platform']))
        if 'rubygems_summary' in params:
            query_params.append(('rubygems.summary', params['rubygems_summary']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/rest/beta/search/assets', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PageAssetXO',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
